syntax = "proto3";

package fund;

message global_vars {
  // fee is calculated as: Fee = (K+1)^3 * T / fee_denominator
  // where K is the total active and upcoming projects
  // and T is the duration of the project (in milliseconds).
  //
  // This design is necessary because the function
  // to pay projects has loops that makes updates in all active
  // and upcoming projects, so this number cannot be large to avoid
  // excessive computing times.
  //
  // As the number of active and upcoming projects increases
  // new projects are penalized with higher fees.
  // The duration of the project also impacts in the computation
  // then the fee increases proportional to the duration.
  //
  // As an example, with fee_denominator = 10000, a new project
  // with a duration of 1 year, will have to pay:
  // fee = 6.8 KOIN if active + upcoming projects = 5
  // fee = 292 KOIN if active + upcoming projects = 20
  // fee = 4183 KOIN if active + upcoming projects = 50
  // fee = 32491 KOIN if active + upcoming projects = 100
  uint64 fee_denominator = 1;
  uint32 total_projects = 2;
  uint32 total_upcoming_projects = 3;
  uint32 total_active_projects = 4;
  repeated uint64 payment_times = 5;
  uint64 remaining_balance = 6;
}

message set_global_vars_arguments {
  uint64 fee_denominator = 1;
  repeated uint64 payment_times = 2;
}

message submit_project_arguments {
  bytes creator = 1;
  bytes beneficiary = 2;
  string title = 3;
  string description = 4;
  uint64 monthly_payment = 5;
  uint64 starting_date = 6;
  uint64 ending_date = 7;
  uint64 fee = 8;
}

message submit_project_result {
}

enum project_status {
  upcoming = 0;
  active = 1;
  past = 2;
}

message project {
  uint32 id = 1;
  bytes creator = 2;
  bytes beneficiary = 3;
  string title = 4;
  string description = 5;
  uint64 monthly_payment = 6;
  uint64 starting_date = 7;
  uint64 ending_date = 8;
  project_status status = 9;
  uint64 total_votes = 10;
  repeated uint64 votes = 11;
}

message existence {
}

message vote_info {
  uint64 expiration = 1;
  uint32 weight = 2;
}

message set_votes_koinos_fund_arguments {
  bytes account = 1;
  bool votes_koinos_fund = 2;
}

message update_vote_arguments {
  bytes voter = 1;
  uint32 project_id = 2;
  uint32 weight = 3;
}

message update_vote_result {
}

message pay_projects_result {
  uint64 next_payment_time = 1;
}
